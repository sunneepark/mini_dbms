/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
package com.dp.miniDBMS.qp.qpp;

import java.util.*;
import com.dp.miniDBMS.qp.qpe.*;
import com.dp.miniDBMS.qp.qpo.*;
import com.dp.miniDBMS.sm.smd.*;
import com.dp.miniDBMS.sm.smo.DicColumn;
import com.dp.miniDBMS.sm.smo.type.*;
import com.dp.miniDBMS.qp.qpo.expression.*;

public class SQLParser implements SQLParserConstants {

/*customize AST*/

// Grammar --------------------------------------------------------------------
  final public Command Command() throws ParseException {
        Command ret;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DP_CREATE:
      jj_consume_token(DP_CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DP_DATABASE:
        ret = createDatabase();
        break;
      case DP_TABLE:
        ret = createTable();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case DP_INSERT:
      ret = insert();
      break;
    case DP_SELECT:
    case DP_EXPLAIN:
      ret = select();
      break;
    case DP_UPDATE:
      ret = update();
      break;
    case DP_DELETE:
      ret = delete();
      break;
    case DP_USE:
      ret = chooseDatabase();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(42);
    jj_consume_token(0);
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

//------------- SQL command -----------------------------

// USE { database name }
  final public CreateDatabaseCommand chooseDatabase() throws ParseException {
        String databaseName;
    jj_consume_token(DP_USE);
    databaseName = Identifier();
    {if (true) return new CreateDatabaseCommand(token, databaseName, true);}
    throw new Error("Missing return statement in function");
  }

// CREATE DATABASE { database name }
  final public CreateDatabaseCommand createDatabase() throws ParseException {
        String databaseName;
    jj_consume_token(DP_DATABASE);
    databaseName = Identifier();
    {if (true) return new CreateDatabaseCommand(token, databaseName);}
    throw new Error("Missing return statement in function");
  }

// CREATE TABLE { db name.table name } ( { column0 name , column0 type } ... )
  final public CreateTableCommand createTable() throws ParseException {
        String tableName;
        List<DicColumn> attributes
                        = new ArrayList<DicColumn>();
        DicColumn attribute;
    jj_consume_token(DP_TABLE);
    tableName = Identifier();
    jj_consume_token(43);
    attribute = makeAttr();
                          attributes.add(attribute);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(44);
      attribute = makeAttr();
                          attributes.add(attribute);
    }
    jj_consume_token(45);
          {if (true) return new CreateTableCommand(token, tableName, attributes);}
    throw new Error("Missing return statement in function");
  }

//column dictionary 만들기
  final public DicColumn makeAttr() throws ParseException {
        String colName;
        TypeBase type;
        int length = -1;
    colName = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DP_INT:
      jj_consume_token(DP_INT);
                                     type = TypeEnum.INT.makeType();
      break;
    case DP_CHAR:
      jj_consume_token(DP_CHAR);
      jj_consume_token(43);
      jj_consume_token(INT_LITERAL);
                                                          length=Integer.parseInt(token.image);
      jj_consume_token(45);
                          type = TypeEnum.CHAR.makeType(); type.setMaxSize(length);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new DicColumn(colName, type);}
    throw new Error("Missing return statement in function");
  }

// INSERT INTO { databsase name.table name } VALUES { val0, val1 ... } -----------------------------------------
  final public InsertCommand insert() throws ParseException {
        String tableName;
        List<TypeBase> values = new ArrayList<TypeBase>();

        TypeBase value;
    jj_consume_token(DP_INSERT);
    jj_consume_token(DP_INTO);
    tableName = Identifier();
    jj_consume_token(DP_VALUES);
    jj_consume_token(43);
    value = GetValue();
                                   values.add(value);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(44);
      value = GetValue();
                                       values.add(value);
    }
    jj_consume_token(45);
          {if (true) return new InsertCommand(token, tableName, values);}
    throw new Error("Missing return statement in function");
  }

// SELECT { attr0,... 예외) count(*) } FROM { table0,... } ( WHERE { conditions } ) ( ORDER BY { column } ) --------------------------
  final public SelectCommand select() throws ParseException {
        List<String> attrNames = null; //select 대상 속성 이름.
        int type = -1;
        List<String> tables = new ArrayList<String>(); //from 대상 테이블 이름. 
        Exp condition = null;

        String name;
        String ignoreCol = "0"; //ignore 인덱스 대상 
        String orderCol = null; //order 대상 컬럼 이름.
        boolean isExplain = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DP_EXPLAIN:
      jj_consume_token(DP_EXPLAIN);
      isExplain = change();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(DP_SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      name = Identifier();
                                        attrNames = new ArrayList<String>();
                                        attrNames.add(name);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        jj_consume_token(44);
        name = Identifier();
                                                        attrNames.add(name);
      }
      break;
    case SYM_STAR:
      jj_consume_token(SYM_STAR);
                               type = 1;
      break;
    case SYM_COUNT:
      jj_consume_token(SYM_COUNT);
                                type = 2;
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DP_FROM);
    name = Identifier();
                                    tables.add(name);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(44);
      name = Identifier();
                                        tables.add(name);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DP_IGNORE:
      jj_consume_token(DP_IGNORE);
      jj_consume_token(DP_INDEX);
      jj_consume_token(43);
      ignoreCol = Identifier();
      jj_consume_token(45);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DP_WHERE:
      jj_consume_token(DP_WHERE);
      condition = Expression();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DP_ORDER:
      jj_consume_token(DP_ORDER);
      jj_consume_token(DP_BY);
      orderCol = Identifier();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
          {if (true) return new SelectCommand(token, attrNames, type, tables, condition, orderCol, ignoreCol, isExplain);}
    throw new Error("Missing return statement in function");
  }

//////////////////
// 
// 0. and 와 or 을 기준으로 left , right > (select) 일 경우가 큼 
// 1. 비교 연산자 
// 2. 
//  
  final public Exp Expression() throws ParseException {
        Exp ret;
          Exp.clearGlobalExpString();
    ret = LogicOp();
          ret.saveExpString();  {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Exp LogicOp() throws ParseException {
        Exp ret;
        BinaryExp postfix;
    ret = CmpOp();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DP_AND:
      case DP_OR:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      postfix = LogicOp_postfix();
                  postfix.setLeft(ret);  ret = postfix;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// (AND, OR) - > 논리연산
  final public BinaryExp LogicOp_postfix() throws ParseException {
        Token op;
        Exp right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DP_AND:
      jj_consume_token(DP_AND);
      break;
    case DP_OR:
      jj_consume_token(DP_OR);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          op = token;  Exp.appendToGlobalExpString(" "+token.image.toUpperCase()+" ");
    right = CmpOp();
          {if (true) return new BinaryExp(null, op, right);}
    throw new Error("Missing return statement in function");
  }

// 부등호 표현식 ( > , < , >= , <= ) - > 비교연산자
  final public Exp CmpOp() throws ParseException {
        Exp ret;
        BinaryExp postfix;
    ret = AddOp();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_EQUAL:
      case SYM_EXCLEQUAL:
      case SYM_LESS:
      case SYM_MORE:
      case SYM_LESSEQUAL:
      case SYM_MOREEQUAL:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      postfix = CmpOp_postfix();
                  postfix.setLeft(ret);  ret = postfix;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryExp CmpOp_postfix() throws ParseException {
        Token op;
        Exp right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_LESS:
      jj_consume_token(SYM_LESS);
      break;
    case SYM_LESSEQUAL:
      jj_consume_token(SYM_LESSEQUAL);
      break;
    case SYM_EQUAL:
      jj_consume_token(SYM_EQUAL);
      break;
    case SYM_EXCLEQUAL:
      jj_consume_token(SYM_EXCLEQUAL);
      break;
    case SYM_MORE:
      jj_consume_token(SYM_MORE);
      break;
    case SYM_MOREEQUAL:
      jj_consume_token(SYM_MOREEQUAL);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          op =  token;  Exp.appendToGlobalExpString(token.image);
    right = AddOp();
          {if (true) return new BinaryExp(null, op, right);}
    throw new Error("Missing return statement in function");
  }

// ( + , - ) - > 수식연산자 
  final public Exp AddOp() throws ParseException {
        Exp ret;
        BinaryExp postfix;
    ret = MulOp();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_PLUS:
      case SYM_MINUS:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      postfix = AddOp_postfix();
                  postfix.setLeft(ret);  ret = postfix;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryExp AddOp_postfix() throws ParseException {
        Token op;
        Exp right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_PLUS:
      jj_consume_token(SYM_PLUS);
      break;
    case SYM_MINUS:
      jj_consume_token(SYM_MINUS);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          op = token;  Exp.appendToGlobalExpString(token.image);
    right = MulOp();
          {if (true) return new BinaryExp(null, op, right);}
    throw new Error("Missing return statement in function");
  }

// ( * , / ) - > 수식연산자
  final public Exp MulOp() throws ParseException {
        Exp ret;
        BinaryExp postfix;
    ret = PrimaryExp();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_STAR:
      case SYM_SLASH:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      postfix = MulOp_postfix();
                  postfix.setLeft(ret);  ret = postfix;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryExp MulOp_postfix() throws ParseException {
        Token op;
        Exp right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_STAR:
      jj_consume_token(SYM_STAR);
      break;
    case SYM_SLASH:
      jj_consume_token(SYM_SLASH);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          op = token;  Exp.appendToGlobalExpString(token.image);
    right = PrimaryExp();
          {if (true) return new BinaryExp(null, op, right);}
    throw new Error("Missing return statement in function");
  }

//
// 경우의수 4가지
//
// 0. 숫자일 경우
// 1. 문자일 경우
// 2. 칼럼 이름일 경우 
// 3. 괄호일 경우
//
  final public Exp PrimaryExp() throws ParseException {
        Exp ret;
        String name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
      jj_consume_token(INT_LITERAL);
                          ret = new LiteralExp(token, Integer.parseInt(token.image));
                        Exp.appendToGlobalExpString(token.image);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
                          ret = new LiteralExp(token, LiteralExp.processStringLiteral(token.image));
                        Exp.appendToGlobalExpString(token.image);
      break;
    case IDENTIFIER:
      name = Identifier();
                         ret = new AttributeExp(token, name);
                        Exp.appendToGlobalExpString(name);
      break;
    case 43:
      jj_consume_token(43);
                              Exp.appendToGlobalExpString('(');
      ret = LogicOp();
      jj_consume_token(45);
                              Exp.appendToGlobalExpString(')');
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// UPDATE { table1 } set { attr1 } { to be value } where { condition }
  final public UpdateCommand update() throws ParseException {
        String tableName;
        String attrName;
        TypeBase value;

        Exp condition = null;
    jj_consume_token(DP_UPDATE);
    tableName = Identifier();
    jj_consume_token(DP_SET);
    attrName = Identifier();
    jj_consume_token(SYM_EQUAL);
    value = GetValue();
    jj_consume_token(DP_WHERE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case INT_LITERAL:
    case STRING_LITERAL:
    case 43:
      condition = Expression();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
          {if (true) return new UpdateCommand(token, tableName, attrName, value, condition);}
    throw new Error("Missing return statement in function");
  }

// DELETE FROM { table } WHERE { condition }
  final public DeleteCommand delete() throws ParseException {
        String tableName;

        Exp condition = null;
    jj_consume_token(DP_DELETE);
    jj_consume_token(DP_FROM);
    tableName = Identifier();
    jj_consume_token(DP_WHERE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case INT_LITERAL:
    case STRING_LITERAL:
    case 43:
      condition = Expression();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
          {if (true) return new DeleteCommand(token, tableName, condition);}
    throw new Error("Missing return statement in function");
  }

//insert 할 때 해당 타입이 무엇인지
  final public TypeBase GetValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
      jj_consume_token(INT_LITERAL);
                          {if (true) return TypeEnum.INT.makeTypeWithValue(token.image);}
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
                          String temp = token.image;
                          {if (true) return TypeEnum.CHAR.makeTypeWithValue(temp.substring(1, temp.length()-1));}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//대소문자 상관 없게 하기 위함.
  final public String Identifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
          {if (true) return token.image.toUpperCase();}
    throw new Error("Missing return statement in function");
  }

  final public boolean change() throws ParseException {
          {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x880,0x2681140,0x0,0xc000000,0x0,0x2000000,0x0,0x10000000,0x0,0x800000,0x4000,0x8000,0x60000,0x60000,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x70000000,0x70000000,0x70000000,0x60000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1000,0x0,0x1000,0x0,0x1000,0x202,0x1000,0x0,0x0,0x0,0x0,0x0,0x1f8,0x1f8,0x1,0x1,0x6,0x6,0x800,0x800,0x800,0x0,};
   }

  /** Constructor with InputStream. */
  public SQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
